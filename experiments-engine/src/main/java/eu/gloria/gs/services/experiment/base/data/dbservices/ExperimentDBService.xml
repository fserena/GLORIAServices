<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="eu.gloria.gs.services.experiment.base.data.dbservices.ExperimentDBService">

	<update id="createExperimentTable">
		CREATE TABLE IF NOT EXISTS
		`experiment` (
		`idexperiment` int(11) NOT NULL
		AUTO_INCREMENT,
		`name` varchar(100) NOT
		NULL,
		`author` varchar(40) NOT
		NULL,
		`description` varchar(128) DEFAULT
		NULL,
		`type` varchar(10) NOT
		NULL,
		`status` varchar(20) NOT
		NULL,
		PRIMARY
		KEY (`idexperiment`),
		UNIQUE
		KEY
		`name_UNIQUE` (`name`),
		KEY `author_fk`
		(`author`),
		CONSTRAINT
		`author_fk` FOREIGN KEY
		(`author`) REFERENCES
		`user` (`name`) ON
		DELETE
		NO
		ACTION ON UPDATE NO
		ACTION
		) ENGINE=InnoDB
		DEFAULT CHARSET=utf8
	</update>

	<update id="createReservationTable">
		CREATE TABLE IF NOT EXISTS
		`reservation` (
		`idreservation` int(11) NOT NULL
		AUTO_INCREMENT,
		`user` varchar(40) NOT
		NULL,
		`experiment` int(11) NOT
		NULL,
		`begin` datetime NOT NULL,
		`end`
		datetime DEFAULT NULL,
		PRIMARY KEY
		(`idreservation`),
		KEY `experiment_fk`
		(`experiment`),
		KEY `user_res_fk`
		(`user`),
		KEY `experiment_res_fk`
		(`experiment`),
		CONSTRAINT
		`experiment_res_fk` FOREIGN KEY
		(`experiment`) REFERENCES
		`experiment` (`idexperiment`) ON DELETE
		CASCADE ON
		UPDATE CASCADE,
		CONSTRAINT `user_res_fk` FOREIGN KEY (`user`)
		REFERENCES `user`
		(`name`) ON DELETE CASCADE ON
		UPDATE CASCADE
		)
		ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8
	</update>

	<update id="createRTReservationTable">
		CREATE TABLE IF NOT EXISTS
		`rt_reservation` (
		`reservation_id` int(11) NOT NULL,
		`rt_name` varchar(50) NOT NULL,
		PRIMARY KEY
		(`reservation_id`,`rt_name`),
		KEY `reservation_id_fk`
		(`reservation_id`),
		KEY `rt_id_fk` (`rt_name`),
		CONSTRAINT `rt_id_fk`
		FOREIGN KEY (`rt_name`) REFERENCES `rt` (`name`) ON
		DELETE
		CASCADE ON
		UPDATE CASCADE,
		CONSTRAINT `reservation_id_fk` FOREIGN
		KEY
		(`reservation_id`) REFERENCES
		`reservation`
		(`idreservation`) ON DELETE
		CASCADE ON UPDATE CASCADE
		) ENGINE=InnoDB
		DEFAULT CHARSET=utf8
	</update>

	<update id="createExperimentParameterTable">
		CREATE TABLE IF NOT EXISTS
		`experiment_parameter` (
		`experiment` int(11) NOT
		NULL,
		`parameter` varchar(45) CHARACTER SET
		utf8 NOT NULL,
		`type`
		text CHARACTER SET utf8 NOT NULL,
		`idparameter`
		int(11) NOT
		NULL
		AUTO_INCREMENT,
		PRIMARY KEY
		(`idparameter`,`experiment`,`parameter`),
		KEY
		`param_experiment_fk`
		(`experiment`),
		CONSTRAINT
		`param_experiment_fk`
		FOREIGN KEY
		(`experiment`) REFERENCES
		`experiment`
		(`idexperiment`) ON DELETE
		CASCADE ON
		UPDATE CASCADE
		) ENGINE=InnoDB
		DEFAULT CHARSET=utf8
	</update>

	<update id="createExperimentOperationTable">
		CREATE TABLE IF NOT EXISTS
		`experiment_operation` (
		`experiment` int(11) NOT
		NULL,
		`operation` varchar(45) NOT NULL,
		`type`
		varchar(45) NOT
		NULL,
		`idoperation` int(11) NOT NULL
		AUTO_INCREMENT,
		PRIMARY KEY
		(`idoperation`),
		KEY `op_experiment_fk`
		(`experiment`),
		CONSTRAINT
		`op_experiment_fk` FOREIGN KEY
		(`experiment`) REFERENCES
		`experiment`
		(`idexperiment`) ON DELETE
		CASCADE ON
		UPDATE CASCADE
		)
		ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT
		CHARSET=utf8
	</update>

	<update id="createExperimentArgumentTable">
		CREATE TABLE IF NOT EXISTS `experiment_argument` (
		`operation` int(11) NOT NULL,
		`parameter` int(11) DEFAULT NULL,
		`number` int(11) NOT NULL,
		`subarg` varchar(100) DEFAULT NULL,
		`pointer` int(11) DEFAULT NULL,
		PRIMARY KEY (`operation`,`number`),
		KEY
		`args_parameter_fk` (`parameter`),
		KEY `args_operation_fk`
		(`operation`),
		KEY `args_pointer_fk` (`pointer`),
		CONSTRAINT
		`args_parameter_fk` FOREIGN KEY (`parameter`) REFERENCES
		`experiment_parameter` (`idparameter`) ON DELETE CASCADE ON UPDATE
		CASCADE,
		CONSTRAINT `args_operation_fk` FOREIGN KEY (`operation`)
		REFERENCES
		`experiment_operation` (`idoperation`) ON DELETE CASCADE ON
		UPDATE
		CASCADE,
		CONSTRAINT `args_pointer_fk` FOREIGN KEY (`pointer`)
		REFERENCES
		`experiment_operation` (`idoperation`) ON DELETE CASCADE ON
		UPDATE
		CASCADE
		) ENGINE=InnoDB DEFAULT CHARSET=utf8
	</update>

	<update id="createExperimentContextTable">
		CREATE TABLE IF NOT EXISTS
		`experiment_context` (
		`pid` int(11) NOT NULL,
		`rid`
		int(11) NOT NULL,
		`value` text
		DEFAULT NULL,
		PRIMARY KEY
		(`pid`,`rid`),
		KEY
		`context_parameter_fk`
		(`pid`),
		KEY
		`context_reservation_fk`
		(`rid`),
		CONSTRAINT
		`context_parameter_fk`
		FOREIGN KEY
		(`pid`) REFERENCES
		`experiment_parameter`
		(`idparameter`) ON
		DELETE
		CASCADE ON UPDATE
		CASCADE,
		CONSTRAINT
		`context_reservation_fk`
		FOREIGN
		KEY (`rid`)
		REFERENCES
		`reservation`
		(`idreservation`) ON DELETE
		CASCADE ON
		UPDATE
		CASCADE
		) ENGINE=InnoDB
		DEFAULT CHARSET=utf8
	</update>

	<update id="createExperimentResultsTable">
		CREATE TABLE IF NOT EXISTS `experiment_results` (
		`idresult` int(11) NOT NULL AUTO_INCREMENT,
		`value` text NOT
		NULL,
		`date` datetime NOT NULL,
		`context` int(11) NOT NULL,
		`user`
		varchar(45)
		NOT NULL,
		`tag` int(11) NOT NULL,
		PRIMARY KEY (`idresult`),
		KEY
		`context_results_fk` (`context`),
		KEY `user_results_fk` (`user`),
		KEY
		`tag_results_fk` (`tag`),
		CONSTRAINT `tag_results_fk` FOREIGN KEY
		(`tag`) REFERENCES
		`experiment_parameter` (`idparameter`) ON DELETE
		CASCADE ON UPDATE
		CASCADE,
		CONSTRAINT `context_results_fk` FOREIGN KEY
		(`context`) REFERENCES `reservation`
		(`idreservation`) ON DELETE
		CASCADE ON UPDATE CASCADE,
		CONSTRAINT `user_results_fk` FOREIGN KEY
		(`user`) REFERENCES `user` (`name`) ON
		DELETE CASCADE ON UPDATE CASCADE
		) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8
	</update>

	<select id="getExperimentParameter"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ParameterEntry">
		SELECT * FROM
		`experiment_parameter`
		WHERE
		experiment=#{experiment_} AND parameter=#{parameter_}
	</select>

	<select id="getParameterById"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ParameterEntry">
		SELECT * FROM
		`experiment_parameter`
		WHERE
		idparameter=#{pid_}
	</select>

	<select id="getOperationById"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.OperationEntry">
		SELECT * FROM
		`experiment_operation`
		WHERE
		idoperation=#{oid_}
	</select>

	<insert id="saveExperimentParameter"
		parameterType="eu.gloria.gs.services.experiment.base.data.dbservices.ParameterEntry">
		INSERT INTO
		`experiment_parameter`
		(experiment, parameter,
		type)
		VALUE (
		#{experiment}, #{parameter},
		#{type} )
	</insert>

	<select id="getAllExperimentParameters"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ParameterEntry">
		SELECT * FROM
		`experiment_parameter`
		WHERE
		experiment=#{experiment_}
	</select>

	<select id="getExperimentOperation"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.OperationEntry">
		SELECT * FROM
		`experiment_operation`
		WHERE
		experiment=#{experiment_} AND operation=#{operation_}
	</select>

	<insert id="saveExperimentOperation"
		parameterType="eu.gloria.gs.services.experiment.base.data.dbservices.OperationEntry">
		INSERT INTO
		`experiment_operation`
		(experiment, operation,
		type)
		VALUE (
		#{experiment}, #{operation},
		#{type} )
	</insert>

	<select id="getAllExperimentOperations"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.OperationEntry">
		SELECT * FROM
		`experiment_operation`
		WHERE
		experiment=#{experiment_}
	</select>

	<select id="getParameterContext"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ContextEntry">
		SELECT * FROM
		`experiment_context`
		WHERE
		pid=#{pid_} AND
		rid=#{rid_}
	</select>

	<insert id="saveParameterContext"
		parameterType="eu.gloria.gs.services.experiment.base.data.dbservices.ContextEntry">
		INSERT INTO
		`experiment_context`
		(pid,
		rid, value)
		VALUE (
		#{pid},
		#{rid}, #{value} )
	</insert>

	<update id="setParameterContextValue">
		UPDATE `experiment_context`
		SET
		value=#{value_}
		WHERE
		pid=#{pid_} AND rid=#{rid_}
	</update>

	<select id="getParameterContextValue" resultType="string">
		SELECT value
		FROM `experiment_context`
		WHERE pid=#{pid_} AND
		rid=#{rid_}
	</select>

	<select id="getReservationContext"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ContextEntry">
		SELECT
		pid,rid,value FROM
		`experiment_parameter`
		LEFT JOIN
		`experiment_context`
		ON
		(experiment_context.pid =
		experiment_parameter.idparameter)
		WHERE
		rid=#{rid_}
	</select>

	<select id="getParametersNumberInContext" resultType="int">
		SELECT
		count(*) FROM
		`experiment_context`
		WHERE
		rid=#{rid_}
	</select>

	<select id="isReservationContextInstantiated" resultType="boolean">
		SELECT
		count(*) > 0
		FROM
		`experiment_context`
		WHERE
		rid=#{rid_}
	</select>

	<select id="isReservationActiveNow" resultType="boolean">
		SELECT
		count(*) >
		0
		FROM
		`reservation`
		WHERE
		idreservation=#{rid_} AND begin &lt;=
		#{when_}
		AND end &gt;=
		#{when_}
	</select>

	<select id="isReservationActiveNowForUser" resultType="boolean">
		SELECT
		count(*) >
		0
		FROM
		`reservation`
		WHERE
		idreservation=#{rid_} AND begin &lt;=
		#{when_} AND end &gt;=
		#{when_} AND user=#{user_}
	</select>

	<select id="getOperationArguments"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ArgumentEntry">
		SELECT *
		FROM
		`experiment_argument`
		WHERE
		operation=#{opid_}
	</select>

	<insert id="saveOperationArgument"
		parameterType="eu.gloria.gs.services.experiment.base.data.dbservices.ArgumentEntry">
		INSERT INTO
		`experiment_argument`
		(operation, parameter,
		number, pointer, subarg)
		VALUE (
		#{operation}, #{parameter},
		#{number},
		#{pointer}, #{subarg})
	</insert>

	<select id="getExperiment"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ExperimentEntry">
		SELECT * FROM
		`experiment`
		WHERE
		name=#{name_}
	</select>

	<select id="getExperimentId" resultType="int">
		SELECT idexperiment FROM
		`experiment`
		WHERE
		name=#{name_}
	</select>

	<select id="getExperimentById"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ExperimentEntry">
		SELECT * FROM
		`experiment`
		WHERE
		idexperiment=#{idexperiment_}
	</select>

	<select id="getAllTypeExperiments" resultType="string">
		SELECT name FROM
		`experiment`
		WHERE type=#{type_}
	</select>

	<insert id="saveExperiment"
		parameterType="eu.gloria.gs.services.experiment.base.data.dbservices.ExperimentEntry">
		INSERT INTO
		`experiment`
		(name, author,
		description, type)
		VALUE (
		#{name}, #{author}, #{description}, #{type} )
	</insert>

	<update id="setExperimentDescription">
		UPDATE `experiment`
		SET
		description=#{description_}
		WHERE name
		=#{name_}
	</update>

	<delete id="removeExperiment">
		DELETE FROM `experiment`
		WHERE
		name=#{name_}
	</delete>

	<delete id="removeDependantOperations">
		DELETE FROM experiment_operation where idoperation in
		(SELECT DISTINCT operation FROM experiment_argument LEFT JOIN
		experiment_parameter on
		experiment_argument.parameter=experiment_parameter.idparameter WHERE
		experiment_parameter.parameter=#{name_} AND
		experiment_parameter.experiment=#{experiment_})
	</delete>

	<delete id="removeExperimentContexts">
		DELETE FROM experiment_context where
		experiment_context.rid in (SELECT
		DISTINCT idreservation FROM
		reservation LEFT JOIN
		experiment on
		reservation.idreservation=experiment.idexperiment WHERE
		reservation.experiment=#{experiment_})
	</delete>

	<delete id="removeExperimentParameter">
		DELETE from
		experiment_parameter
		WHERE
		parameter=#{name_} AND
		experiment=#{experiment_}
	</delete>

	<delete id="removeExperimentOperation">
		DELETE from experiment_operation
		WHERE
		operation=#{name_} AND experiment=#{experiment_}
	</delete>

	<delete id="removeAllExperimentParameters">
		DELETE from experiment_parameter
		WHERE
		experiment=#{experiment_}
	</delete>

	<delete id="removeAllExperimentOperations">
		DELETE from experiment_operation
		WHERE
		experiment=#{experiment_}
	</delete>

	<select id="containsExperiment" resultType="boolean">
		SELECT count(*)>0
		FROM
		`experiment`
		WHERE
		name=#{name_}
	</select>

	<select id="getUserReservations"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT * FROM
		`reservation`
		WHERE
		user=#{user_} ORDER BY begin
	</select>

	<select id="getUserReservationById"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT * FROM
		`reservation`
		WHERE
		user=#{user_} AND
		idreservation=#{rid_} ORDER BY begin
	</select>

	<select id="getAllReservationsFrom"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT * FROM
		`reservation`
		WHERE begin
		&gt;=#{from_} OR end
		&gt; #{from_} ORDER BY begin
	</select>

	<select id="getAllReservationsShouldBeObsolete"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT * FROM
		`reservation`
		WHERE end &lt;= NOW() AND status !='OBSOLETE'
	</select>

	<select id="getAllReservationsFromByType"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT * FROM
		`reservation` LEFT JOIN `experiment`
		ON
		(reservation.experiment=experiment.idexperiment)
		WHERE type =
		#{type_}
		AND (begin
		&gt;=#{from_} OR end
		&gt; #{from_}) ORDER BY begin
	</select>

	<select id="getUserReservationsFrom"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT * FROM
		`reservation`
		WHERE
		user=#{user_} AND (begin
		&gt;=#{from_} OR end &gt; #{from_}) ORDER BY
		begin
	</select>

	<select id="getUserReservationsFromByType"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT * FROM
		`reservation` LEFT JOIN `experiment`
		ON
		(reservation.experiment=experiment.idexperiment)
		WHERE user=#{user_}
		AND type=#{type_} AND (begin
		&gt;=#{from_} OR end
		&gt; #{from_}) ORDER
		BY begin
	</select>

	<select id="getReservation"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT * FROM
		`reservation`
		WHERE
		user=#{user_} AND
		experiment=#{experiment_} AND begin=#{begin_} AND
		end=#{end_}
	</select>
	
	<select id="getReservationIds"
		resultType="int">
		SELECT idreservation FROM
		`reservation`
		WHERE
		user=#{user_} AND
		experiment=#{experiment_} AND begin=#{begin_} AND
		end=#{end_}
	</select>

	<select id="getReservationById"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT * FROM
		`reservation`
		WHERE
		idreservation=#{rid_}
	</select>

	<select id="containsReservation" resultType="boolean">
		SELECT count(*)>0
		FROM
		`reservation`
		WHERE
		user=#{user_} AND
		experiment=#{experiment_} AND
		begin=#{begin_} AND end=#{end_}
	</select>

	<select id="anyReservationAt" resultType="boolean">
		SELECT count(*)>0
		FROM
		`reservation`
		WHERE begin &lt;=
		#{when_} AND end &gt;=
		#{when_}
	</select>

	<select id="anyReservationAtByType" resultType="boolean">
		SELECT count(*)>0
		FROM
		`reservation` LEFT JOIN `experiment`
		ON
		(reservation.experiment=experiment.idexperiment)
		WHERE
		type=#{type_} AND
		begin &lt;=
		#{when_} AND end
		&gt;=
		#{when_}
	</select>

	<select id="anyUserReservationAt" resultType="boolean">
		SELECT count(*)>0
		FROM
		`reservation`
		WHERE
		user=#{user_} AND begin &lt;=
		#{when_} AND end
		&gt;= #{when_}
	</select>

	<select id="anyUserReservationAtByType" resultType="boolean">
		SELECT
		count(*)>0
		FROM
		`reservation` LEFT JOIN `experiment`
		ON
		(reservation.experiment=experiment.idexperiment)
		WHERE
		type=#{type_} AND
		user=#{user_} AND
		begin &lt;=
		#{when_} AND end
		&gt;=
		#{when_}
	</select>

	<select id="getUserReservationsAt"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT *
		FROM
		`reservation`
		WHERE
		user=#{user_} AND begin &lt;=
		#{when_} AND end &gt;= #{when_}
	</select>

	<select id="getUserReservationsAtByType"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT *
		FROM
		`reservation` LEFT JOIN `experiment`
		ON
		(reservation.experiment=experiment.idexperiment)
		WHERE
		type=#{type_} AND
		user=#{user_} AND begin &lt;=
		#{when_} AND end &gt;=
		#{when_}
	</select>

	<select id="getAllReservationsAt"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT *
		FROM
		`reservation`
		WHERE
		begin &lt;=
		#{when_} AND end
		&gt;=
		#{when_}
	</select>

	<select id="getAllReservationsAtByType"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT *
		FROM
		`reservation` LEFT JOIN `experiment`
		ON
		(reservation.experiment=experiment.idexperiment)
		WHERE
		type=#{type_} AND
		begin &lt;=
		#{when_} AND end
		&gt;=
		#{when_}
	</select>

	<select id="getAllReservationsBefore"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT *
		FROM
		`reservation`
		WHERE
		begin &lt;=
		#{when_} AND end
		&lt;=
		#{when_}
	</select>

	<select id="getAllReservationsBeforeByType"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT *
		FROM
		`reservation` LEFT JOIN `experiment`
		ON
		(reservation.experiment=experiment.idexperiment)
		WHERE
		type=#{type_} AND
		begin &lt;=
		#{when_} AND end
		&lt;=
		#{when_}
	</select>

	<select id="anyRTReservationBetween" resultType="boolean">
		SELECT
		count(*)>0
		FROM `reservation`
		LEFT JOIN
		`rt_reservation`
		ON
		(rt_reservation.reservation_id =
		reservation.idreservation)
		WHERE
		rt_name=#{rt_} AND ((begin &lt;
		#{from_} AND end &gt; #{from_}) OR
		(begin &gt; #{from_} AND begin &lt;
		#{to_}) OR (begin &lt;= #{from_}
		AND end
		&gt;= #{to_}))
	</select>

	<select id="getAllReservationsUntil"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		SELECT
		idreservation,user,experiment,begin,end
		FROM
		`reservation`
		LEFT JOIN
		`rt_reservation`
		ON
		(rt_reservation.reservation_id =
		reservation.idreservation)
		WHERE
		rt_name=#{rt_} AND (begin &lt;=
		#{until_}
		AND end &lt;=#{until_})
	</select>

	<insert id="saveReservation"
		parameterType="eu.gloria.gs.services.experiment.base.data.dbservices.ReservationEntry">
		INSERT INTO
		`reservation`
		(user,
		experiment, begin, end,
		status)
		VALUE (
		#{user}, #{experiment}, #{begin},
		#{end}, #{status})
	</insert>

	<insert id="saveRTReservation">
		INSERT INTO
		`rt_reservation`
		(reservation_id, rt_name)
		VALUE (
		#{reservation_id_}, #{rt_name_})
	</insert>

	<select id="getAllRTOfReservation" resultType="string">
		SELECT rt_name
		FROM
		`rt_reservation`
		WHERE
		reservation_id =#{rid_}
	</select>

	<delete id="removeReservation">
		DELETE FROM `reservation`
		WHERE
		idreservation=#{rid_}
	</delete>

	<update id="setReservationStatus">
		UPDATE `reservation`
		SET
		status=#{status_}
		WHERE
		idreservation=#{rid_}
	</update>

	<delete id="removeReservationContext">
		DELETE FROM `experiment_context`
		WHERE
		rid=#{rid_}
	</delete>

	<insert id="saveResult"
		parameterType="eu.gloria.gs.services.experiment.base.data.dbservices.ResultEntry">
		INSERT INTO
		`experiment_results`
		(value,
		date, context,
		user, tag)
		VALUE (
		#{value}, #{date}, #{context}, #{user}, #{tag})
	</insert>

	<select id="getContextResults"
		resultType="eu.gloria.gs.services.experiment.base.data.dbservices.ResultEntry">
		SELECT * FROM
		`experiment_results`
		WHERE
		context=#{rid_}
	</select>

	<select id="getAllExperimentContexts" resultType="int">
		SELECT
		idreservation FROM (SELECT exp.name,res.idreservation from
		`experiment` as exp left join `reservation` as res on
		exp.idexperiment=res.experiment) as rids where name=#{name_}
	</select>

</mapper>
